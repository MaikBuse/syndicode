syntax = "proto3";

package syndicode_economy_v1;

import "interface/v1/shared.proto";
import "google/protobuf/wrappers.proto"; // For optional primitive types

// Request message for querying buildings.
// Allows filtering by owning corporation and bounding box coordinates.
// The 'limit' field restricts the maximum number of results returned (max 100).
message QueryBuildingsRequest {
  // UUID of the owning corporation to filter by (optional).
  google.protobuf.StringValue owning_corporation_uuid = 1;

  // Minimum longitude of the bounding box (optional).
  google.protobuf.DoubleValue min_lon = 2;

  // Maximum longitude of the bounding box (optional).
  google.protobuf.DoubleValue max_lon = 3;

  // Minimum latitude of the bounding box (optional).
  google.protobuf.DoubleValue min_lat = 4;

  // Maximum latitude of the bounding box (optional).
  google.protobuf.DoubleValue max_lat = 5;

  // Maximum number of results to return (optional, maximum 100).
  google.protobuf.Int64Value limit = 6;
}

// Represents detailed information about a building.
message BuildingDetails {
  string gml_id = 1;
}

// Response containing the list of matching building details
message QueryBuildingsResponse {
  // The tick for which the update is relevant.
  int64 game_tick = 1;

  repeated BuildingDetails buildings = 2;

  // Total number of buildings matching the criteria
  int64 total_count = 3;
}

// Request to query business listings based on criteria
message QueryBusinessListingsRequest {
  // Filter by minimum asking price (inclusive)
  google.protobuf.Int64Value min_asking_price = 1;

  // Filter by maximum asking price (inclusive)
  google.protobuf.Int64Value max_asking_price = 2;

  // Filter by specific seller corporation UUID
  google.protobuf.StringValue seller_corporation_uuid = 3;

  // Filter by market uuid
  google.protobuf.StringValue market_uuid = 5;

  // Filter by minimum operational expenses (inclusive)
  google.protobuf.Int64Value min_operational_expenses = 6;

  // Filter by maximum operational expenses (inclusive)
  google.protobuf.Int64Value max_operational_expenses = 7;

  // Field to sort by.
  BusinessListingSortBy sort_by = 20;

  // Direction to sort (ASCENDING or DESCENDING)
  syndicode_interface_v1.SortDirection sort_direction = 21;

  // --- Pagination ---
  // Maximum number of results to return
  google.protobuf.Int64Value limit = 30;
  // Number of results to skip (for pagination)
  google.protobuf.Int64Value offset = 31;
}

enum BusinessListingSortBy {
  SORT_BY_UNSPECIFIED = 0;
  PRICE = 1;
  NAME = 2;
  OPERATION_EXPENSES = 3;
  MARKET_VOLUME = 4;
}

// Request to query businesses based on criteria
message QueryBusinessesRequest {
  // Filter by specific owning corporation UUID
  google.protobuf.StringValue owning_corporation_uuid = 1;

  // Filter by market uuid
  google.protobuf.StringValue market_uuid = 2;

  // Filter by minimum operational expenses (inclusive)
  google.protobuf.Int64Value min_operational_expenses = 3;

  // Filter by maximum operational expenses (inclusive)
  google.protobuf.Int64Value max_operational_expenses = 4;

  // Field to sort by.
  BusinessSortBy sort_by = 20;

  // Direction to sort (ASCENDING or DESCENDING)
  syndicode_interface_v1.SortDirection sort_direction = 21;

  // --- Pagination ---
  // Maximum number of results to return
  google.protobuf.Int64Value limit = 30;
  // Number of results to skip (for pagination)
  google.protobuf.Int64Value offset = 31;
}

enum BusinessSortBy {
  BUSINESS_SORT_BY_UNSPECIFIED = 0;
  BUSINESS_NAME = 1;
  BUSINESS_OPERATION_EXPENSES = 2;
  BUSINESS_MARKET_VOLUME = 3;
}

// Represents detailed information about a business, including related market data.
message BusinessDetails {
  string business_uuid = 1;
  string business_name = 2;
  google.protobuf.StringValue owning_corporation_uuid = 3;
  string market_uuid = 4;
  int64 operational_expenses = 5;
  string headquarter_building_uuid = 6;
}

// Response containing the list of matching business details.
message QueryBusinessesResponse {
  // UUID generated on the client to match the response with the initial request.
  string request_uuid = 1;
  repeated BusinessDetails businesses = 2;
  // Total number of businesses matching the criteria
  int64 total_count = 3;
}

// Represents detailed information about a business listing, including related business and market data.
message BusinessListingDetails {
  string listing_uuid = 1;
  string business_uuid = 2;
  string business_name = 3;
  google.protobuf.StringValue seller_corporation_uuid = 4;
  string market_uuid = 5;
  int64 asking_price = 6;
  int64 operational_expenses = 7;
}

// Response containing the list of matching business listing details.
message QueryBusinessListingsResponse {
  // UUID generated on the client to match the response with the initial request.
  string request_uuid = 1;
  repeated BusinessListingDetails listings = 2;
  // Total number of listings matching the criteria
  int64 total_count = 3;
}

// Request to get the player's corporation details.
message GetCorporationRequest {}

// Response containing corporation details.
message GetCorporationResponse {
  // UUID generated on the client to match the response with the initial request.
  string request_uuid = 1;
  // Corporation owned by the player.
  Corporation corporation = 2;
}

message CreateCorporationResponse {
  // UUID generated on the client to match the response with the initial request.
  string request_uuid = 1;

  // Corporation that has been created.
  Corporation corporation = 2;
}

message DeleteCorporationResponse {
  // UUID generated on the client to match the response with the initial request.
  string request_uuid = 1;

  // UUID of the user the corporation belonged to.
  string user_uuid = 2;
  // UUID of the corporation that has been deleted.
  string corporation_uuid = 3;
}

message AcquireListedBusinessRequest {
  // UUID of the business listing.
  string business_listing_uuid = 1;
}

message AcquireListedBusinessResponse {
  // UUID generated on the client to match the response with the initial request.
  string request_uuid = 1;
  // The acquired business
  Business business = 2;
}

// Represents a player's corporation in the game.
message Corporation {
  // UUID of the corporation.
  string uuid = 1;

  // UUID of the user who owns the corporation.
  string user_uuid = 2;

  // Name of the corporation.
  string name = 3;

  // Current balance or funds available.
  int64 balance = 4;
}

message Business {
  // UUID of the business.
  string uuid = 1;

  // UUID of the businesses' market.
  string market_uuid = 2;

  // UUID of the corporation owning the business.
  string owning_corporation_uuid = 3;

  // Name of the business.
  string name = 4;

  // Operational expenses of the business that accrue every game tick.
  int64 operational_expenses = 5;
}

// This file is @generated by prost-build.
/// Request to query business listings based on criteria
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryBusinessListingsRequest {
    /// Filter by minimum asking price (inclusive)
    #[prost(message, optional, tag = "1")]
    pub min_asking_price: ::core::option::Option<i64>,
    /// Filter by maximum asking price (inclusive)
    #[prost(message, optional, tag = "2")]
    pub max_asking_price: ::core::option::Option<i64>,
    /// Filter by specific seller corporation UUID
    #[prost(message, optional, tag = "3")]
    pub seller_corporation_uuid: ::core::option::Option<::prost::alloc::string::String>,
    /// Filter by market uuid
    #[prost(message, optional, tag = "5")]
    pub market_uuid: ::core::option::Option<::prost::alloc::string::String>,
    /// Filter by minimum operational expenses (inclusive)
    #[prost(message, optional, tag = "6")]
    pub min_operational_expenses: ::core::option::Option<i64>,
    /// Filter by maximum operational expenses (inclusive)
    #[prost(message, optional, tag = "7")]
    pub max_operational_expenses: ::core::option::Option<i64>,
    /// Field to sort by. Allowed values: "price", "name", "op_expenses", "market_volume"
    #[prost(string, tag = "20")]
    pub sort_by: ::prost::alloc::string::String,
    /// Direction to sort (ASCENDING or DESCENDING)
    #[prost(enumeration = "super::syndicode_interface_v1::SortDirection", tag = "21")]
    pub sort_direction: i32,
    /// --- Pagination ---
    /// Maximum number of results to return
    #[prost(message, optional, tag = "30")]
    pub limit: ::core::option::Option<i64>,
    /// Number of results to skip (for pagination)
    #[prost(message, optional, tag = "31")]
    pub offset: ::core::option::Option<i64>,
}
/// Represents detailed information about a business listing, including related business and market data.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BusinessListingDetails {
    #[prost(string, tag = "1")]
    pub listing_uuid: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub business_uuid: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub business_name: ::prost::alloc::string::String,
    /// Optional wrapper
    #[prost(message, optional, tag = "4")]
    pub seller_corporation_uuid: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int64, tag = "5")]
    pub asking_price: i64,
    #[prost(int64, tag = "6")]
    pub operational_expenses: i64,
}
/// Response containing the list of matching business listings
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryBusinessListingsResponse {
    /// UUID generated on the client to match the response with the initial request.
    #[prost(string, tag = "1")]
    pub request_uuid: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "2")]
    pub listings: ::prost::alloc::vec::Vec<BusinessListingDetails>,
    /// Total number of listings matching the criteria (ignoring limit/offset)
    #[prost(int64, tag = "3")]
    pub total_count: i64,
}
/// Request to get the player's corporation details.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetCorporationRequest {}
/// Response containing corporation details.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetCorporationResponse {
    /// UUID generated on the client to match the response with the initial request.
    #[prost(string, tag = "1")]
    pub request_uuid: ::prost::alloc::string::String,
    /// Corporation owned by the player.
    #[prost(message, optional, tag = "2")]
    pub corporation: ::core::option::Option<Corporation>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AcquireListedBusinessRequest {
    /// UUID of the business.
    #[prost(string, tag = "1")]
    pub business_uuid: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AcquireListedBusinessResponse {
    /// UUID generated on the client to match the response with the initial request.
    #[prost(string, tag = "1")]
    pub request_uuid: ::prost::alloc::string::String,
    /// The acquired business
    #[prost(message, optional, tag = "2")]
    pub business: ::core::option::Option<Business>,
}
/// Represents a player's corporation in the game.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Corporation {
    /// UUID of the corporation.
    #[prost(string, tag = "1")]
    pub uuid: ::prost::alloc::string::String,
    /// UUID of the user who owns the corporation.
    #[prost(string, tag = "2")]
    pub user_uuid: ::prost::alloc::string::String,
    /// Name of the corporation.
    #[prost(string, tag = "3")]
    pub name: ::prost::alloc::string::String,
    /// Current balance or funds available.
    #[prost(int64, tag = "4")]
    pub balance: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Business {
    /// UUID of the business.
    #[prost(string, tag = "1")]
    pub uuid: ::prost::alloc::string::String,
    /// UUID of the businesses' market.
    #[prost(string, tag = "2")]
    pub market_uuid: ::prost::alloc::string::String,
    /// UUID of the corporation owning the business.
    #[prost(string, tag = "3")]
    pub owning_corporation_uuid: ::prost::alloc::string::String,
    /// Name of the business.
    #[prost(string, tag = "4")]
    pub name: ::prost::alloc::string::String,
    /// Operational expenses of the business that accrue every game tick.
    #[prost(int64, tag = "5")]
    pub operational_expenses: i64,
}

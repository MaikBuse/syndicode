name: Release Binaries

on:
  release:
    types: [published]

permissions:
  contents: write

jobs:
  build-release:
    name: Build and Upload Release Binaries
    strategy:
      fail-fast: false
      matrix:
        include:
          # --- Linux with MUSL for maximum portability ---
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            binary_name: syndicode-client
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            binary_name: syndicode-client
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_name: syndicode-client.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: syndicode-client
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_name: syndicode-client

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Install protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install build dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          # Install musl tools for the native x86_64 build
          sudo apt-get install -y musl-tools
          # Install the aarch64 cross-compiler for the aarch64 build
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Build binary
        run: cargo build -v --release --package syndicode-client --target ${{ matrix.target }}
        # Tell cargo which linker to use for the aarch64-musl target
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER: aarch64-linux-gnu-gcc

      - name: Prepare binary for packaging
        run: |
          mkdir staging
          cp target/${{ matrix.target }}/release/${{ matrix.binary_name }} staging

      - name: Package binary (Windows)
        if: runner.os == 'Windows'
        run: |
          Compress-Archive -Path staging/* -DestinationPath "syndicode-client-${{ github.ref_name }}-${{ matrix.target }}.zip"
        shell: pwsh

      - name: Package binary (Linux/macOS)
        if: runner.os == 'Linux' || runner.os == 'macOS'
        run: |
          tar czvf "syndicode-client-${{ github.ref_name }}-${{ matrix.target }}.tar.gz" -C staging .

      - name: Verify packaged files
        run: ls -R
        shell: bash

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./syndicode-client-${{ github.ref_name }}-${{ matrix.target }}.${{ runner.os == 'Windows' && 'zip' || 'tar.gz' }}
          asset_name: syndicode-client-${{ github.ref_name }}-${{ matrix.target }}.${{ runner.os == 'Windows' && 'zip' || 'tar.gz' }}
          asset_content_type: ${{ runner.os == 'Windows' && 'application/zip' || 'application/gzip' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

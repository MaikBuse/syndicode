// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UserRequest {
    #[prost(
        oneof = "user_request::RequestEnum",
        tags = "10000, 10001, 10002, 10003, 10004, 20000, 30000, 30001"
    )]
    pub request_enum: ::core::option::Option<user_request::RequestEnum>,
}
/// Nested message and enum types in `UserRequest`.
pub mod user_request {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum RequestEnum {
        #[prost(message, tag = "10000")]
        CreateUser(super::CreateUserRequest),
        #[prost(message, tag = "10001")]
        InitGame(super::InitGameRequest),
        #[prost(message, tag = "10002")]
        StartGame(super::StartGameRequest),
        #[prost(message, tag = "10003")]
        EndGame(super::EndGameRequest),
        #[prost(message, tag = "10004")]
        JoinGame(super::JoinGameRequest),
        #[prost(message, tag = "20000")]
        GetCorporation(super::super::economy::GetCorporationRequest),
        #[prost(message, tag = "30000")]
        SpawnUnit(super::super::warfare::SpawnUnitRequest),
        #[prost(message, tag = "30001")]
        ListUnit(super::super::warfare::ListUnitsRequest),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GameUpdate {
    #[prost(
        oneof = "game_update::ResponseEnum",
        tags = "15000, 15001, 15002, 15003, 15004, 25000, 35000, 35001"
    )]
    pub response_enum: ::core::option::Option<game_update::ResponseEnum>,
}
/// Nested message and enum types in `GameUpdate`.
pub mod game_update {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum ResponseEnum {
        #[prost(message, tag = "15000")]
        CreateUser(super::CreateUserResponse),
        #[prost(message, tag = "15001")]
        InitGame(super::InitGameResponse),
        #[prost(message, tag = "15002")]
        StartGame(super::StartGameResponse),
        #[prost(message, tag = "15003")]
        EndGame(super::EndGameResponse),
        #[prost(message, tag = "15004")]
        JoinGame(super::JoinGameResponse),
        #[prost(message, tag = "25000")]
        GetCorporation(super::super::economy::GetCorporationResponse),
        #[prost(message, tag = "35000")]
        SpawnUnit(super::super::warfare::SpawnUnitResponse),
        #[prost(message, tag = "35001")]
        ListUnits(super::super::warfare::ListUnitsResponse),
    }
}
/// Message for a request to login with a username and password
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LoginRequest {
    /// Username of the player attempting to login
    #[prost(string, tag = "1")]
    pub username: ::prost::alloc::string::String,
    /// Password of the player attempting to login
    #[prost(string, tag = "2")]
    pub password: ::prost::alloc::string::String,
}
/// Message for the response after a successful login, containing a JWT token
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LoginResponse {
    /// JSON Web Token (JWT) for the authenticated session
    #[prost(string, tag = "1")]
    pub jwt: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateUserRequest {
    #[prost(string, tag = "1")]
    pub username: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "2")]
    pub password: ::prost::alloc::vec::Vec<u8>,
    #[prost(enumeration = "UserRole", tag = "3")]
    pub role: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateUserResponse {
    #[prost(bytes = "vec", tag = "1")]
    pub uuid: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(enumeration = "UserRole", tag = "3")]
    pub role: i32,
}
/// Message for the request to initialize a new game
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct InitGameRequest {}
/// Message for the response after initializing a new game, containing session info
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InitGameResponse {
    /// Session details of the initialized game
    #[prost(message, optional, tag = "1")]
    pub session: ::core::option::Option<SessionInfo>,
}
/// Message for starting a game, requires the session UUID
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartGameRequest {
    /// Unique identifier for the game session
    #[prost(bytes = "vec", tag = "1")]
    pub session_uuid: ::prost::alloc::vec::Vec<u8>,
}
/// Empty response indicating the game has started
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StartGameResponse {}
/// Message for ending a game, requires the session UUID
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EndGameRequest {
    /// Unique identifier for the game session
    #[prost(bytes = "vec", tag = "1")]
    pub session_uuid: ::prost::alloc::vec::Vec<u8>,
}
/// Empty response indicating the game has ended
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EndGameResponse {}
/// Message for joining an existing game, requires session UUID and corporation name
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct JoinGameRequest {
    /// Unique identifier for the game session
    #[prost(bytes = "vec", tag = "1")]
    pub session_uuid: ::prost::alloc::vec::Vec<u8>,
    /// Name of the corporation the player wants to join
    #[prost(string, tag = "2")]
    pub corporation_name: ::prost::alloc::string::String,
}
/// Message for the response after a player joins a game, containing corporation details
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct JoinGameResponse {
    /// Information about the corporation the player joined
    #[prost(message, optional, tag = "1")]
    pub corporation: ::core::option::Option<super::economy::CorporationInfo>,
}
/// Message for storing session-related information
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SessionInfo {
    /// Unique identifier for the session
    #[prost(bytes = "vec", tag = "1")]
    pub uuid: ::prost::alloc::vec::Vec<u8>,
    /// Time interval (e.g., for updates) for the session
    #[prost(int64, tag = "2")]
    pub interval: i64,
    /// Current state of the session (e.g., INITIATING, RUNNING)
    #[prost(enumeration = "SessionState", tag = "3")]
    pub state: i32,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum UserRole {
    RoleUnspecified = 0,
    User = 1,
    Admin = 2,
}
impl UserRole {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RoleUnspecified => "ROLE_UNSPECIFIED",
            Self::User => "USER",
            Self::Admin => "ADMIN",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROLE_UNSPECIFIED" => Some(Self::RoleUnspecified),
            "USER" => Some(Self::User),
            "ADMIN" => Some(Self::Admin),
            _ => None,
        }
    }
}
/// Enum to define the possible states of a game session
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SessionState {
    Unspecified = 0,
    /// The game is being initialized
    Initiating = 1,
    /// The game is currently running
    Running = 2,
}
impl SessionState {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "SESSION_STATE_UNSPECIFIED",
            Self::Initiating => "INITIATING",
            Self::Running => "RUNNING",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SESSION_STATE_UNSPECIFIED" => Some(Self::Unspecified),
            "INITIATING" => Some(Self::Initiating),
            "RUNNING" => Some(Self::Running),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod control_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct ControlClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl ControlClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> ControlClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> ControlClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            ControlClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn login(
            &mut self,
            request: impl tonic::IntoRequest<super::LoginRequest>,
        ) -> std::result::Result<tonic::Response<super::LoginResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/control.Control/Login");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("control.Control", "Login"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn game_stream_rpc(
            &mut self,
            request: impl tonic::IntoStreamingRequest<Message = super::UserRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::GameUpdate>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/control.Control/GameStreamRpc",
            );
            let mut req = request.into_streaming_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("control.Control", "GameStreamRpc"));
            self.inner.streaming(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod control_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with ControlServer.
    #[async_trait]
    pub trait Control: std::marker::Send + std::marker::Sync + 'static {
        async fn login(
            &self,
            request: tonic::Request<super::LoginRequest>,
        ) -> std::result::Result<tonic::Response<super::LoginResponse>, tonic::Status>;
        /// Server streaming response type for the GameStreamRpc method.
        type GameStreamRpcStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::GameUpdate, tonic::Status>,
            >
            + std::marker::Send
            + 'static;
        async fn game_stream_rpc(
            &self,
            request: tonic::Request<tonic::Streaming<super::UserRequest>>,
        ) -> std::result::Result<
            tonic::Response<Self::GameStreamRpcStream>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct ControlServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> ControlServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for ControlServer<T>
    where
        T: Control,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/control.Control/Login" => {
                    #[allow(non_camel_case_types)]
                    struct LoginSvc<T: Control>(pub Arc<T>);
                    impl<T: Control> tonic::server::UnaryService<super::LoginRequest>
                    for LoginSvc<T> {
                        type Response = super::LoginResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::LoginRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Control>::login(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = LoginSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/control.Control/GameStreamRpc" => {
                    #[allow(non_camel_case_types)]
                    struct GameStreamRpcSvc<T: Control>(pub Arc<T>);
                    impl<T: Control> tonic::server::StreamingService<super::UserRequest>
                    for GameStreamRpcSvc<T> {
                        type Response = super::GameUpdate;
                        type ResponseStream = T::GameStreamRpcStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<tonic::Streaming<super::UserRequest>>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Control>::game_stream_rpc(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GameStreamRpcSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(empty_body());
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for ControlServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "control.Control";
    impl<T> tonic::server::NamedService for ControlServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
